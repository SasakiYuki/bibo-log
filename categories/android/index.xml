<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on ヤマダユキの備忘log</title>
    <link>https://sasakiyuki.github.io/categories/android/</link>
    <description>Recent content in Android on ヤマダユキの備忘log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 09 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sasakiyuki.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AndroidTips-003-リスト表示をしてみる</title>
      <link>https://sasakiyuki.github.io/posts/first/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/first/</guid>
      <description>複数の似たようなデータを表示する場合にはリスト形式のViewを使うのが一般的です。 今回はそのリスト形式のViewをどのように扱うかをやっていきたいと思います。
流れ  Listを表示する Activity を追加します。 レイアウトにリストの元になるRecyclerViewを置きます RecyclerViewにリストを表示するための Adapter を用意する （リストに表示するデータを用意する） 用意したAdapterをRecyclerView にセットしてリストを表示する  この流れでいきます。
目指すリストは下の通りです。
シンプルな文字だけどリストです。
Activityを追加 特に難しいことはしませんが一応。 Empty Activity を作り今回は名前は SimpleStringListActivity としました。
レイアウトファイルにRecyclerViewを置く Androidでリスト表示をするには RecyclerVIew を使います。
まずはレイアウトファイルに配置してみましょう。
1 2 3 4 5 6 7 8 9 10  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;android.support.v7.widget.RecyclerView android:id=&amp;#34;@+id/recyclerView&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   RecyclerViewはサポートライブラリーで追加されたViewです。
RecyclerViewで表示するレイアウトを作る リストとして表示する主な要素となるレイアウトを作成します。 今回はシンプルなリストを目指すのでTextViewのみ置かれたシンプルなレイアウトファイルを作成します。
1 2 3 4 5 6 7 8 9 10 11 12 13  &amp;lt;?</description>
    </item>
    
    <item>
      <title>アプリケーションのレイアウト</title>
      <link>https://sasakiyuki.github.io/posts/android_tutorial_layout/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tutorial_layout/</guid>
      <description>レイアウトとは レイアウトとは、GUIの配置を決めるための仕組みです。 このレイアウトを使うことによって、Androidアプリの画面を簡単に作成することができます。
レイアウトを構成する要素 画面を構成する要素（パーツ）は大きくわけて２種類あります。
 Wedget(ウィジェット） Layout(レイアウト）  です。これらの要素をまとめてViewといいます。
WedgetとLayoutの違いを超わかりやすく説明します。 ざっくり言うと、Layoutの中（要素）にWedgetを配置していくイメージです。 枯山水で例えると一番親要素のLayoutを「寺院」全体として、その中の小要素のレイアウトが「庭園」、さらにその中に配置される孫要素が「砂紋」や「石」です。
それぞれ具体的にどのような種類があるか。
Wedget  TextView EditText Button ImageView ListView  Layout  FrameLayout LinearLayout TableLayout GridLayout RelativeLayout ConstraintLayout(new!)  以上が代表的なViewとなります。もちろんこれ以外にもたくさんありますが、必要な時に覚えていけば問題ありません。
どちらにも共通する要素 サイズの指定方法 .xmlでの指定は大きく分けて三つあります - 画面いっぱいに表示する - その要素を表示するのに必要なだけ大きさを確保する - サイズを直接指定する
の三つです。ではそれぞれやっていきましょう。
1 2 3 4 5 6 7 8 9 10 11  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;TextView android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:background=&amp;#34;@android:color/holo_blue_bright&amp;#34; android:text=&amp;#34;テキストを表示します&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   まず一旦 LinearLayoutとは何ぞやということなどは忘れてもらってこれを実際に画面に映してみると</description>
    </item>
    
    <item>
      <title>AndroidManifestについて</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_android_manifest/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_android_manifest/</guid>
      <description>AndroidManifestとは AndroidManifest.xmlはすべてのプロジェクトに等しく一つ存在するものです。
作っているAndroidアプリに関する情報をAndroidのOS(システム）に伝える役目を担っており、コード実行の際に必要になる重要な情報を記述する必要があります。
プロジェクトの基底ディレクトリに AndroidManifest.xml として置く必要があり名前を変えることなどはできません。
XML で記述されており、タグで要素を構築します。
AndroidManifest内で行うこと  アプリを構成する要素 ユーザーパーミッション スタイルや名前、アイコンなどを指定 Intentのフィルター  ファイル内の規則 AndroidManifestで必須の要素は &amp;lt;manifest&amp;gt; &amp;lt;application&amp;gt; のみです。 これらは省くことはできず、逆にそれ以外は任意ということになります。（実質必要というものは存在します） また manifest と application はそれぞれ一回ずつのみ宣言され、階層は manifest -&amp;gt; application の中に存在しないといけません。
実際に見てみましょう。 例えばAndroidStudioでプロジェクトを初期で作った時に生成されるmanifestは以下です。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; package=&amp;quot;string&amp;quot;&amp;gt; &amp;lt;application android:allowBackup=&amp;quot;true&amp;quot; android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot; android:roundIcon=&amp;quot;@mipmap/ic_launcher_round&amp;quot; android:supportsRtl=&amp;quot;true&amp;quot; android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt; &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt; &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/manifest&amp;gt;  manifestタグの中にapplicationが存在しているのがわかると思います。
注目してもらいたいのは２行目 xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; この.xmlファイルはAndroidManifestですよ、と宣言しているということになります。 また、xml上に android のネームスペースを定義しています。またこの中の属性は絶対に &amp;quot;http://schemas.android.com/apk/res/android&amp;quot; である必要がありますのでご注意ください。
次に application内を見てみると様々な情報が書いてあることがわかると思います。 上から</description>
    </item>
    
    <item>
      <title>AndroidTips-001-押されたら何かをするを実装する</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_001/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_001/</guid>
      <description>サンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  import android.os.Bundle import android.support.v7.app.AppCompatActivity import android.view.View import android.widget.ImageView import kotlinx.android.synthetic.main.activity_main.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) setupButton() } private fun setupButton() { // 1 val button = findViewById&amp;lt;ImageView&amp;gt;(R.</description>
    </item>
    
  </channel>
</rss>