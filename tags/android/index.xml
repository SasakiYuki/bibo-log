<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on ヤマダユキの備忘log</title>
    <link>https://sasakiyuki.github.io/tags/android/</link>
    <description>Recent content in Android on ヤマダユキの備忘log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 20 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sasakiyuki.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin超入門①</title>
      <link>https://sasakiyuki.github.io/posts/kotlin_tutorial_basic_001/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/kotlin_tutorial_basic_001/</guid>
      <description>実行環境 本当は実行環境をローカルに作りたいところですが、今回は皆さんで実行環境を合わせるためにWeb上のツールを使いましょう。
https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt
ハローワールド コンソール上にて Hello world を表示してみましょう。 実行結果に何かを表示するときには print() 関数を使います。
1 2 3  fun main(args: Array&amp;lt;String&amp;gt;) { print(&amp;#34;Hello world&amp;#34;) }   printのかっこ内に文字を入力することでコンソール上に表示されます。
fun main ~~~　の当たりは今は必要なものだと思って流し読みしてください！
文字or数字 今回は Hello world という 文字列 を表示しました。 文字列は上記の通り &amp;quot; &amp;quot; のようにダブルコーテーションで囲むことで明示的に文字列であるとコンパイラーに伝えます。
では数字はどうでしょう。 数字では特に何かで囲むことなく表示することがあります。ではやってみましょう。
1  print(1)   上の通り数字では特に囲う必要はありません。
この仕様は print() だけに限らず後述する変数やメソッドの場合にも「文字列ならダブルコーテーションで囲む」「数字ならそのまま入力」するとなりますので忘れないようにしましょう。
変数 Kotlin に限らずプログラミングには「変数」と言われる概念が存在します。プログラミングの中ではデータは変数というもので扱います。データとは数字であったり文字列であったりします。
変数という言葉は日常生活には馴染みがないですが、よく言われるのは「データを入れるための箱」と例えられるくらい簡単なものです。
変数の定義 Kotlinには変数の定義の仕方がいくつかあります。
 後に再代入可能な型を宣言した変数 後に再代入が不可能な型を宣言した変数 後に再代入可能な型を宣言しない変数 後に再代入不可能な型を宣言しない変数  の４種類存在します。
まず大きく分けて「再代入が可能かどうか」
代入 先ほどから代入、再代入という言葉が出ていますがプログラミングにおける代入とは変数に値を入れることです。用語として今後出てくるので確実に覚えてください。
再代入が不可能な変数の定義 1  val 変数名 = 初期化する値   kotlinでは変数を定義する際に絶対に初期化する値を代入しなきゃいけません。なぜしなければならないかは明確に理由が存在しますが、今はしなければならないものとして考えておいてください。 実際にval で宣言してみましょう。</description>
    </item>
    
    <item>
      <title>トランザクションアナウンスにはNISのタイムスタンプを使う必要がある</title>
      <link>https://sasakiyuki.github.io/posts/nem_tips_001_transaction_timstamp/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/nem_tips_001_transaction_timstamp/</guid>
      <description>トランザクションアナウンスにはNISのタイムスタンプを使う必要がある タイトルの通りですが、トランザクションを作る際のタイムスタンプはローカルタイムではなくNISから持ってくる必要があります。
「は～～？そんなことドキュメントに書いてないぞ～～？」 と思った方　正解です。書いてません。
経緯 書こうと思った経緯ですが、某日　NEMFourm にて
とある人物がテストネットのHTTPS対応ノードを立てた旨をフォーラムに投稿しました。 すると一つのコメントが書き込まれました。 「なんで『nis.useNetworkTime = false』してんの？」と。要するにNetworktaimeを使わないよう設定していることを指摘しています。 これはミスではなくテストネットを立てた人にはある考えがあっての行動でした。 その考えというのが以下です。
「nem-libraryをはじめとする有名NEMLibraryはマシーンローカルタイムを使っているため」 とのことでした。確かに主要なライブラリはローカルタイムを採用しているものが多く、テストネットということもありこれは非常に理にかなった提案であると私も思いました。 また、テストネットを立てた人は「本来であればライブラリ側が対応するべきものですので一時的なdisableであり、こういった状況が改善されればこうする必要もなくなる」と仰っております。
アクションプラン さて、これを読んだエンジニアは何をすべきかは明白かと思います。ライブラリにPR送る？自プロダクトではTimeStampをしっかりセットする？どちらも正しそう。 が、そもそもNetworktimeはどのように取得すればいいでしょう。先ほども言ったようにこの仕様は特にNISのドキュメントには書かれていません。
APIはこれです
1  (NODE_DOMAIN)/time-sync/network-time   やってみる まず上のAPIを叩くとレスポンス形式としては
1 2 3 4  { &amp;#34;sendTimeStamp&amp;#34;: 117445044449, &amp;#34;receiveTimeStamp&amp;#34;: 117445044449 }   シンプルな二つのタイムスタンプだけが含まれています。 これのsendTimeStampを使用します。
これをトランザクションアナウンスAPIを叩くときに使いましょう！！
ちなみに拙作ラクーンウォレットでもローカルタイムを渡しているので対応する必要があります。
前提として使用させてもらっている nem-kotlin ではtimestampを渡すとそれが使われますが、渡さない場合ローカルタイムを自動的にセットしてくれています。該当コード
ので、timestampを渡すよう修正します。ラクーン側のコードは汚いんでホントは見てほしくないんですがここです。
おまけ このAPIに限りませんがNEMのタイムスタンプはちょっと特殊です。 例えばこれをそのままDateに変換すると全然違う日付になります。 ではどうするか。 NEMのジェネシスブロック時間を足す必要があります。
ちなみにジェネシスブロックの生成日は
1  cal.set(2015, 3 - 1, 29, 0, 6, 25)   です。これを足してDateを正しい日付にします。</description>
    </item>
    
    <item>
      <title>AndroidTips-003-リスト表示をしてみる</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_003/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_003/</guid>
      <description>複数の似たようなデータを表示する場合にはリスト形式のViewを使うのが一般的です。 今回はそのリスト形式のViewをどのように扱うかをやっていきたいと思います。
流れ  Listを表示する Activity を追加します。 レイアウトにリストの元になるRecyclerViewを置きます RecyclerViewにリストを表示するための Adapter を用意する （リストに表示するデータを用意する） 用意したAdapterをRecyclerView にセットしてリストを表示する  この流れでいきます。
目指すリストは下の通りです。
シンプルな文字だけどリストです。
Activityを追加 特に難しいことはしませんが一応。 Empty Activity を作り今回は名前は SimpleStringListActivity としました。
レイアウトファイルにRecyclerViewを置く Androidでリスト表示をするには RecyclerVIew を使います。
まずはレイアウトファイルに配置してみましょう。
1 2 3 4 5 6 7 8 9 10  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;android.support.v7.widget.RecyclerView android:id=&amp;#34;@+id/recyclerView&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   RecyclerViewはサポートライブラリーで追加されたViewです。
RecyclerViewで表示するレイアウトを作る リストとして表示する主な要素となるレイアウトを作成します。 今回はシンプルなリストを目指すのでTextViewのみ置かれたシンプルなレイアウトファイルを作成します。
1 2 3 4 5 6 7 8 9 10 11 12 13  &amp;lt;?</description>
    </item>
    
    <item>
      <title>アプリケーションのレイアウト</title>
      <link>https://sasakiyuki.github.io/posts/android_tutorial_layout/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tutorial_layout/</guid>
      <description>レイアウトとは レイアウトとは、GUIの配置を決めるための仕組みです。 このレイアウトを使うことによって、Androidアプリの画面を簡単に作成することができます。
レイアウトを構成する要素 画面を構成する要素（パーツ）は大きくわけて２種類あります。
 Wedget(ウィジェット） Layout(レイアウト）  です。これらの要素をまとめてViewといいます。
WedgetとLayoutの違いを超わかりやすく説明します。 ざっくり言うと、Layoutの中（要素）にWedgetを配置していくイメージです。 枯山水で例えると一番親要素のLayoutを「寺院」全体として、その中の小要素のレイアウトが「庭園」、さらにその中に配置される孫要素が「砂紋」や「石」です。
それぞれ具体的にどのような種類があるか。
Wedget  TextView EditText Button ImageView ListView  Layout  FrameLayout LinearLayout TableLayout GridLayout RelativeLayout ConstraintLayout(new!)  以上が代表的なViewとなります。もちろんこれ以外にもたくさんありますが、必要な時に覚えていけば問題ありません。
どちらにも共通する要素 サイズの指定方法 .xmlでの指定は大きく分けて三つあります - 画面いっぱいに表示する - その要素を表示するのに必要なだけ大きさを確保する - サイズを直接指定する
の三つです。ではそれぞれやっていきましょう。
1 2 3 4 5 6 7 8 9 10 11  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;TextView android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:background=&amp;#34;@android:color/holo_blue_bright&amp;#34; android:text=&amp;#34;テキストを表示します&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   まず一旦 LinearLayoutとは何ぞやということなどは忘れてもらってこれを実際に画面に映してみると</description>
    </item>
    
    <item>
      <title>AndroidManifestについて</title>
      <link>https://sasakiyuki.github.io/posts/android_document_android_manifest/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_document_android_manifest/</guid>
      <description>AndroidManifestとは AndroidManifest.xmlはすべてのプロジェクトに等しく一つ存在するものです。
作っているAndroidアプリに関する情報をAndroidのOS(システム）に伝える役目を担っており、コード実行の際に必要になる重要な情報を記述する必要があります。
プロジェクトの基底ディレクトリに AndroidManifest.xml として置く必要があり名前を変えることなどはできません。
XML で記述されており、タグで要素を構築します。
AndroidManifest内で行うこと  アプリを構成する要素 ユーザーパーミッション スタイルや名前、アイコンなどを指定 Intentのフィルター  ファイル内の規則 AndroidManifestで必須の要素は &amp;lt;manifest&amp;gt; &amp;lt;application&amp;gt; のみです。 これらは省くことはできず、逆にそれ以外は任意ということになります。（実質必要というものは存在します） また manifest と application はそれぞれ一回ずつのみ宣言され、階層は manifest -&amp;gt; application の中に存在しないといけません。
実際に見てみましょう。 例えばAndroidStudioでプロジェクトを初期で作った時に生成されるmanifestは以下です。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; package=&amp;quot;string&amp;quot;&amp;gt; &amp;lt;application android:allowBackup=&amp;quot;true&amp;quot; android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot; android:roundIcon=&amp;quot;@mipmap/ic_launcher_round&amp;quot; android:supportsRtl=&amp;quot;true&amp;quot; android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt; &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt; &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/manifest&amp;gt;  manifestタグの中にapplicationが存在しているのがわかると思います。
注目してもらいたいのは２行目 xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; この.xmlファイルはAndroidManifestですよ、と宣言しているということになります。 また、xml上に android のネームスペースを定義しています。またこの中の属性は絶対に &amp;quot;http://schemas.android.com/apk/res/android&amp;quot; である必要がありますのでご注意ください。
次に application内を見てみると様々な情報が書いてあることがわかると思います。 上から</description>
    </item>
    
    <item>
      <title>AndroidTips-002-画面移動してみる</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_002/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_002/</guid>
      <description>サンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import android.content.Context import android.content.Intent import android.os.Bundle import android.support.v7.app.AppCompatActivity import kotlinx.android.synthetic.main.activity_main.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) setupButton() } private fun setupButton() { redImageView.setOnClickListener { val intent = Intent(this@MainActivity, FormActivity::class.java) startActivity(intent) } } }   Intent アプリの中での移動に限らず外への移動（例えば標準のWebブラウザに飛ばす）などに用いられる画面遷移用のコンポーネントです。 どこに移動するか　や　移動の際に渡すデータ　などを指定できます。 今回は単純に移動するためだけに使っているシンプルな使い方です。その際のIntentのコンストラクタは</description>
    </item>
    
    <item>
      <title>AndroidTips-001-押されたら何かをするを実装する</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_001/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_001/</guid>
      <description>サンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  import android.os.Bundle import android.support.v7.app.AppCompatActivity import android.view.View import android.widget.ImageView import kotlinx.android.synthetic.main.activity_main.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) setupButton() } private fun setupButton() { // 1 val button = findViewById&amp;lt;ImageView&amp;gt;(R.</description>
    </item>
    
  </channel>
</rss>