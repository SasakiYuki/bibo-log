<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on ヤマダユキの備忘log</title>
    <link>https://sasakiyuki.github.io/tags/flutter/</link>
    <description>Recent content in Flutter on ヤマダユキの備忘log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 20 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sasakiyuki.github.io/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>flutterTips-002-ローカルにデータを保存する(SharedPreferences)</title>
      <link>https://sasakiyuki.github.io/posts/flutter_tips_002/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/flutter_tips_002/</guid>
      <description>FlutterではSharedPreferences 端末に簡単なデータを保存する際Flutterでは SharedPreferences で保存します。 これは Key value方式での保存で、AndroidDeveloperならそのまま SharedPreferences として使えます。iOSDeveloperなら NSUserDefaults がそれに相当します。
SharedPreferencesはXML形式で保存されます。 アプリケーション固有のもので、アプリのアンインストールをしたりアプリのデータを消すと消えます。
データは非同期でディスクに保存されますが、コールバック等がなく書き込みがディスクに保存されることが「絶対」には保証できないため重要なデータを保存するのには向いていません。
AndroidはUIthreadでも扱うことができましたが、flutterでは async awaitを用いた非同期取得になりますのでご注意を。
pubspec.yamlに依存関係を追加 1  shared_preferences:^0.4.3   バージョンはこちらから確認してください。
その後いつも通り
flutter packages get  使ってみる プロジェクトを作った際に生成されるカウントアップの例を改造してSharedPreferencesに保存されるようにしてみます。
まずはコードから
コード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77  import &amp;#39;package:flutter/material.</description>
    </item>
    
    <item>
      <title>flutterTips-001-WebViewを使う</title>
      <link>https://sasakiyuki.github.io/posts/flutter_tips_001/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/flutter_tips_001/</guid>
      <description>cover : &amp;ldquo;https://raw.githubusercontent.com/UtkarshVerma/blog/source/static/images/gci/gci-thumb.png&amp;quot; draft: false
FlutterでWebViewを使うためには少しいじる必要があります。
flutter_webview_plugin Flutterで Nativeの WebView を呼び出すには flutter_webview_plugin の依存を追加する必要があります。
1 2  dependencies:flutter_webview_plugin:&amp;#34;0.2.1+2&amp;#34;   バージョンはこちら からご覧ください。
ターミナル上で
flutter packages get  インストールすることで使えるようになります。
また、WebViewはWdigetTreeには統合されていないためSnackBarやDialogを使うところはできません。
インポート文は
1  import &amp;#39;package:flutter_webview_plugin/flutter_webview_plugin.dart&amp;#39;;   実装 Flutter Navigationを利用して起動します。 公式サンプルのままですが
1 2 3 4 5 6 7 8 9 10  new MaterialApp( routes: { &amp;#34;/&amp;#34;: (_) =&amp;gt; new WebviewScaffold( url: &amp;#34;https://www.google.com&amp;#34;, appBar: new AppBar( title: new Text(&amp;#34;Widget webview&amp;#34;), ), ) }, );   WebviewScaffold を使ってその中で諸々セットして使います。 特に難しいことはありません。</description>
    </item>
    
  </channel>
</rss>