<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on ヤマダユキの備忘log</title>
    <link>https://sasakiyuki.github.io/tags/kotlin/</link>
    <description>Recent content in Kotlin on ヤマダユキの備忘log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 20 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sasakiyuki.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin超入門①</title>
      <link>https://sasakiyuki.github.io/posts/kotlin_tutorial_basic_001/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/kotlin_tutorial_basic_001/</guid>
      <description>実行環境 本当は実行環境をローカルに作りたいところですが、今回は皆さんで実行環境を合わせるためにWeb上のツールを使いましょう。
https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt
ハローワールド コンソール上にて Hello world を表示してみましょう。 実行結果に何かを表示するときには print() 関数を使います。
1 2 3  fun main(args: Array&amp;lt;String&amp;gt;) { print(&amp;#34;Hello world&amp;#34;) }   printのかっこ内に文字を入力することでコンソール上に表示されます。
fun main ~~~　の当たりは今は必要なものだと思って流し読みしてください！
文字or数字 今回は Hello world という 文字列 を表示しました。 文字列は上記の通り &amp;quot; &amp;quot; のようにダブルコーテーションで囲むことで明示的に文字列であるとコンパイラーに伝えます。
では数字はどうでしょう。 数字では特に何かで囲むことなく表示することがあります。ではやってみましょう。
1  print(1)   上の通り数字では特に囲う必要はありません。
この仕様は print() だけに限らず後述する変数やメソッドの場合にも「文字列ならダブルコーテーションで囲む」「数字ならそのまま入力」するとなりますので忘れないようにしましょう。
変数 Kotlin に限らずプログラミングには「変数」と言われる概念が存在します。プログラミングの中ではデータは変数というもので扱います。データとは数字であったり文字列であったりします。
変数という言葉は日常生活には馴染みがないですが、よく言われるのは「データを入れるための箱」と例えられるくらい簡単なものです。
変数の定義 Kotlinには変数の定義の仕方がいくつかあります。
 後に再代入可能な型を宣言した変数 後に再代入が不可能な型を宣言した変数 後に再代入可能な型を宣言しない変数 後に再代入不可能な型を宣言しない変数  の４種類存在します。
まず大きく分けて「再代入が可能かどうか」
代入 先ほどから代入、再代入という言葉が出ていますがプログラミングにおける代入とは変数に値を入れることです。用語として今後出てくるので確実に覚えてください。
再代入が不可能な変数の定義 1  val 変数名 = 初期化する値   kotlinでは変数を定義する際に絶対に初期化する値を代入しなきゃいけません。なぜしなければならないかは明確に理由が存在しますが、今はしなければならないものとして考えておいてください。 実際にval で宣言してみましょう。</description>
    </item>
    
  </channel>
</rss>