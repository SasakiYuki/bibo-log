<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ヤマダユキの備忘log</title>
    <link>https://sasakiyuki.github.io/</link>
    <description>Recent content on ヤマダユキの備忘log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 31 Jan 2018 00:34:29 +0530</lastBuildDate>
    
	<atom:link href="https://sasakiyuki.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Blog</title>
      <link>https://sasakiyuki.github.io/cards/blog/</link>
      <pubDate>Wed, 31 Jan 2018 00:34:29 +0530</pubDate>
      
      <guid>https://sasakiyuki.github.io/cards/blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hackster</title>
      <link>https://sasakiyuki.github.io/cards/hackster/</link>
      <pubDate>Tue, 30 Jan 2018 00:26:04 +0530</pubDate>
      
      <guid>https://sasakiyuki.github.io/cards/hackster/</guid>
      <description></description>
    </item>
    
    <item>
      <title>flutterTips-001-WebViewを使う</title>
      <link>https://sasakiyuki.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/creating-a-new-theme/</guid>
      <description>FlutterでWebViewを使うためには少しいじる必要があります。
flutter_webview_plugin Flutterで Nativeの WebView を呼び出すには flutter_webview_plugin の依存を追加する必要があります。
1 2  dependencies:flutter_webview_plugin:&amp;#34;0.2.1+2&amp;#34;   バージョンはこちら からご覧ください。
ターミナル上で
flutter packages get  インストールすることで使えるようになります。
また、WebViewはWdigetTreeには統合されていないためSnackBarやDialogを使うところはできません。
インポート文は
1  import &amp;#39;package:flutter_webview_plugin/flutter_webview_plugin.dart&amp;#39;;   実装 Flutter Navigationを利用して起動します。 公式サンプルのままですが
1 2 3 4 5 6 7 8 9 10  new MaterialApp( routes: { &amp;#34;/&amp;#34;: (_) =&amp;gt; new WebviewScaffold( url: &amp;#34;https://www.google.com&amp;#34;, appBar: new AppBar( title: new Text(&amp;#34;Widget webview&amp;#34;), ), ) }, );   WebviewScaffold を使ってその中で諸々セットして使います。 特に難しいことはありません。</description>
    </item>
    
    <item>
      <title>AndroidTips-003-リスト表示をしてみる</title>
      <link>https://sasakiyuki.github.io/posts/first/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/first/</guid>
      <description>複数の似たようなデータを表示する場合にはリスト形式のViewを使うのが一般的です。 今回はそのリスト形式のViewをどのように扱うかをやっていきたいと思います。
流れ  Listを表示する Activity を追加します。 レイアウトにリストの元になるRecyclerViewを置きます RecyclerViewにリストを表示するための Adapter を用意する （リストに表示するデータを用意する） 用意したAdapterをRecyclerView にセットしてリストを表示する  この流れでいきます。
目指すリストは下の通りです。
シンプルな文字だけどリストです。
Activityを追加 特に難しいことはしませんが一応。 Empty Activity を作り今回は名前は SimpleStringListActivity としました。
レイアウトファイルにRecyclerViewを置く Androidでリスト表示をするには RecyclerVIew を使います。
まずはレイアウトファイルに配置してみましょう。
1 2 3 4 5 6 7 8 9 10  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;android.support.v7.widget.RecyclerView android:id=&amp;#34;@+id/recyclerView&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   RecyclerViewはサポートライブラリーで追加されたViewです。
RecyclerViewで表示するレイアウトを作る リストとして表示する主な要素となるレイアウトを作成します。 今回はシンプルなリストを目指すのでTextViewのみ置かれたシンプルなレイアウトファイルを作成します。
1 2 3 4 5 6 7 8 9 10 11 12 13  &amp;lt;?</description>
    </item>
    
    <item>
      <title>PythonDjango入門-テンプレートを使ってみる </title>
      <link>https://sasakiyuki.github.io/posts/python_django_templetes/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_django_templetes/</guid>
      <description>テンプレートを使ってそれらしいものを表示する 前回の資料では各種関数の戻り値に HttpResponse を用いてテキストを表示していました。 簡単なテキストを表示するだけならこれでも問題ありませんが、現実でそんなケースはむしろないです。
Webアプリケーションで物を作るなら HTML/CSSやJS,またファイルなどの静的ファイルを活用してユーザーによりよいユーザー体験を届けたいところですが、Pythonは直接HTMLファイルを扱うのは苦手です。そもそも直接HTML/CSSをいじるだけならDjangoを使う必要はありません。
そこでPythonに適した形でHTMLを扱いところです。それを「テンプレート」といいます。テンプレートは変数などPythonで扱っている値をHTMLに代入し表示を行うものでDjangoで用意されているテンプレートは DTL と呼ばれます。(Django Template Language)
基本的にはHTMLのように使えます。
テンプレートを作成、表示する ではテンプレートを作成してみましょう。
テンプレートはどこに作成するか Project -&amp;gt; App -&amp;gt; templates(create) -&amp;gt; AppName(create)
createと書かれているファイルを作成します。 例えば私の今回のケースだと ProjectName:app1 AppName:app1,app2 その中の app2にtempletesというフォルダを作成 templetesというフォルダの中にapp2というフォルダを作りその中にテンプレートを置きます。
ではテンプレートは index.html を作成しましょう。
Pycharmで作成すると
1 2 3 4 5 6 7  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;   単純なHTMLが吐き出されました。これを少しだけいじってさっそくテンプレートっぽく使ってみます。
テンプレート（HTML）で変数を扱う 1 2 3 4 5 6 7  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;{{ title }}&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;   titleを {{}} で囲みました。 これがテンプレートで変数を使うように定義する方法です。</description>
    </item>
    
    <item>
      <title>Pythonにおけるオブジェクト指向</title>
      <link>https://sasakiyuki.github.io/posts/python_django_local_and_url/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_django_local_and_url/</guid>
      <description>Pythonの特徴 初期リリースは91年で開発当初はオブジェクト指向を意識した設計になっていませんでしたが、途中からオブジェクト指向が組み込まれリリースに合わせてそれらは含まれる形になりました。 あまり日本では注目されることのなかった言語のようですが、機械学習やGoogle app engineにpythonが採用（そもそもGoogleでは社内標準言語としてpythonが採用されていますが）されたため日本でも注目を集め今では珍しくないレベルまで来ています。 スクリプト言語であり学習に向いているとされています。その理由としてはそもそもスクリプト言語が実行しやすかったり（コンパイルが不要）、Pythonの記法がシンプルであることから言われています。中でもインデントブロックは大きな特徴の一つです。
Webフレームワークとは さて、では実際にPythonでWebアプリケーションを作ろうとなった時にWebフレームワークの選定が必要になります。 そもそもWebフレームワークとは Webアプリケーションを作成する際に骨組み（足場）になってくれるもののことを指します。フレームワーク自体が機能群のことで、それのWb版だと思っていただければ問題ありません。最大のメリットは「書くコードが減る」ということです。フレームワークによって大なり小なりありますが作成に必要な機能が盛り込まれており１から書く必要がなくなります。また、書き方なども統一されるため可読性が上がるなどのメリットもあります。 Pythonで有名なWebフレームワークは
 Django Flask Bottle  などが有名どころです。 下に行くほど軽量なフレームワークとなっていきます。
今回はこの中でも実際に採用されている万能な大型フレームワークであるDJangoを使っていきたいと思います。
Djangoとは Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.  公式からの引用ですがハイレベルなWebフレームワークで超スピードで実用的なWebアプリケーションを構築するぜ、と言っています。
フルスタックフレームワークと言われる、いわゆる全部盛りフレームワークで、複雑なデーターベース主体のアプリケーションを簡単に書くことができたり、管理者用GUIを自動生成したりするなど便利な機能がたくさん載っています。 また、プロジェクトの構成が単純で生成時のファイルが少ないのもメリットと言えるでしょう。
セットアップ 早速セットアップしていきます
雑にpythonのパスを通します。(TODO)
IDEはPyCharmを使います
新規Djangoプロジェクトの作成 ではさっそくPyCharmを起動してプロジェクトを作成します。
New Project -&amp;gt; Djangoを選択
プロジェクトファイル 自動生成されるコードの紹介
 init.py  Pythonでは特別な意味を持つファイルで、このディレクトリをPythonパッケージであるということを伝えるために存在しています。
 settings.py  Djangoで生成したアプリケーションの設定をつかさどっているファイルです。
 urls.py  URL宣言が含まれているファイルでルーティングはここで行います。
 wsgi.py  作ったPythonプロジェクトをWebサーバーにデプロイする際に使用されるファイルです（エントリポイントを定義している） Webアプリケーションのメインのプログラムとなります。
 manage.</description>
    </item>
    
    <item>
      <title>Pythonにおけるオブジェクト指向</title>
      <link>https://sasakiyuki.github.io/posts/python_object_oriented/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_object_oriented/</guid>
      <description>オブジェクト指向とは プログラミングを効率的に行うための考え方、手法の一つ。概念。 効率的に行うには 共通の設計思想 が大切で現在では主流の一つ。
関連のあるデータや処理をまとめて「オブジェクト」にし、コードを管理しやすくすることである。
pythonはオブジェクト指向言語だが、関数があったりと割と自由な言語である。 javaから来た人間としてはオー自由だなーと思うことが多い。（どっちがいいとかそういう話ではない）
オブジェクト指向を構成する要素  クラス メソッド データ プロパティ インスタンス カプセル化 継承 ポリモーフィズム  では説明していきましょう。
クラス Class とはオブジェクトの設計図 です。 クラス内にはオブジェクトを作る際に必要なデータやメソッド（後述、処理）などが記述されています。
定義の方法は簡単で
class `クラス名` :  これらの中にデータやメソッド追加していくことで一つのクラスになります。
[memo] カラのclass 空のクラスというのも存在します 仕組み的にpythonでは : 以降何もないのは無理なので
1 2  class EmptyClass: pass   と記述します。
[memo] クラスの命名規則 ThisIsClass のように単語区切りで先頭は大文字に
メソッドの定義 method とはクラス内に記述された処理。 定義されたデータを使って何かしたり、クラスに関する何かを定義したりします。 関数との大きな違いはクラスに属しているという点です。
class ClassName: def MethodName(self,その他引数): 処理  メソッドは必ず一つの引数を持ちその一つとは self　です。 ただし呼び出し自体は
インスタンス化（後述）されたクラス.MethodName()  でselfは記述する必要がありません。 このselfとは自身を指しており、 .</description>
    </item>
    
    <item>
      <title>AndroidManifestについて</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_android_manifest/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_android_manifest/</guid>
      <description>AndroidManifestとは AndroidManifest.xmlはすべてのプロジェクトに等しく一つ存在するものです。
作っているAndroidアプリに関する情報をAndroidのOS(システム）に伝える役目を担っており、コード実行の際に必要になる重要な情報を記述する必要があります。
プロジェクトの基底ディレクトリに AndroidManifest.xml として置く必要があり名前を変えることなどはできません。
XML で記述されており、タグで要素を構築します。
AndroidManifest内で行うこと  アプリを構成する要素 ユーザーパーミッション スタイルや名前、アイコンなどを指定 Intentのフィルター  ファイル内の規則 AndroidManifestで必須の要素は &amp;lt;manifest&amp;gt; &amp;lt;application&amp;gt; のみです。 これらは省くことはできず、逆にそれ以外は任意ということになります。（実質必要というものは存在します） また manifest と application はそれぞれ一回ずつのみ宣言され、階層は manifest -&amp;gt; application の中に存在しないといけません。
実際に見てみましょう。 例えばAndroidStudioでプロジェクトを初期で作った時に生成されるmanifestは以下です。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; package=&amp;quot;string&amp;quot;&amp;gt; &amp;lt;application android:allowBackup=&amp;quot;true&amp;quot; android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot; android:roundIcon=&amp;quot;@mipmap/ic_launcher_round&amp;quot; android:supportsRtl=&amp;quot;true&amp;quot; android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt; &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt; &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/manifest&amp;gt;  manifestタグの中にapplicationが存在しているのがわかると思います。
注目してもらいたいのは２行目 xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; この.xmlファイルはAndroidManifestですよ、と宣言しているということになります。 また、xml上に android のネームスペースを定義しています。またこの中の属性は絶対に &amp;quot;http://schemas.android.com/apk/res/android&amp;quot; である必要がありますのでご注意ください。
次に application内を見てみると様々な情報が書いてあることがわかると思います。 上から</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sasakiyuki.github.io/404/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/404/</guid>
      <description> Error 404: Page Not Found It seems that the page that you&amp;rsquo;re trying to access doesn&amp;rsquo;t exist. 😟 If you&amp;rsquo;re sure that it exists, chances are it might have been moved to a new link! You may search for it on the home page. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sasakiyuki.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/about/</guid>
      <description>So, Who Am I? 
ヤマダユキと申します。
都内に住むソフトウェアエンジニアです。 技術ブログや日々の話など雑多に書きます。
基本休日もコード書いてることが多いですが、その他の趣味にカメラとDTM civ6などもあります。
経歴等はWantedlyをご確認ください。 相談は上部mailやtwitterDMなどどこでもどうぞ。</description>
    </item>
    
  </channel>
</rss>