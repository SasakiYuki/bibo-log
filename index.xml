<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ヤマダユキの備忘log</title>
    <link>https://sasakiyuki.github.io/</link>
    <description>Recent content on ヤマダユキの備忘log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 20 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sasakiyuki.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin超入門①</title>
      <link>https://sasakiyuki.github.io/posts/kotlin_tutorial_basic_001/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/kotlin_tutorial_basic_001/</guid>
      <description>実行環境 本当は実行環境をローカルに作りたいところですが、今回は皆さんで実行環境を合わせるためにWeb上のツールを使いましょう。
https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt
ハローワールド コンソール上にて Hello world を表示してみましょう。 実行結果に何かを表示するときには print() 関数を使います。
1 2 3  fun main(args: Array&amp;lt;String&amp;gt;) { print(&amp;#34;Hello world&amp;#34;) }   printのかっこ内に文字を入力することでコンソール上に表示されます。
fun main ~~~　の当たりは今は必要なものだと思って流し読みしてください！
文字or数字 今回は Hello world という 文字列 を表示しました。 文字列は上記の通り &amp;quot; &amp;quot; のようにダブルコーテーションで囲むことで明示的に文字列であるとコンパイラーに伝えます。
では数字はどうでしょう。 数字では特に何かで囲むことなく表示することがあります。ではやってみましょう。
1  print(1)   上の通り数字では特に囲う必要はありません。
この仕様は print() だけに限らず後述する変数やメソッドの場合にも「文字列ならダブルコーテーションで囲む」「数字ならそのまま入力」するとなりますので忘れないようにしましょう。
変数 Kotlin に限らずプログラミングには「変数」と言われる概念が存在します。プログラミングの中ではデータは変数というもので扱います。データとは数字であったり文字列であったりします。
変数という言葉は日常生活には馴染みがないですが、よく言われるのは「データを入れるための箱」と例えられるくらい簡単なものです。
変数の定義 Kotlinには変数の定義の仕方がいくつかあります。
 後に再代入可能な型を宣言した変数 後に再代入が不可能な型を宣言した変数 後に再代入可能な型を宣言しない変数 後に再代入不可能な型を宣言しない変数  の４種類存在します。
まず大きく分けて「再代入が可能かどうか」
代入 先ほどから代入、再代入という言葉が出ていますがプログラミングにおける代入とは変数に値を入れることです。用語として今後出てくるので確実に覚えてください。
再代入が不可能な変数の定義 1  val 変数名 = 初期化する値   kotlinでは変数を定義する際に絶対に初期化する値を代入しなきゃいけません。なぜしなければならないかは明確に理由が存在しますが、今はしなければならないものとして考えておいてください。 実際にval で宣言してみましょう。</description>
    </item>
    
    <item>
      <title>flutterTips-002-ローカルにデータを保存する(SharedPreferences)</title>
      <link>https://sasakiyuki.github.io/posts/flutter_tips_002/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/flutter_tips_002/</guid>
      <description>FlutterではSharedPreferences 端末に簡単なデータを保存する際Flutterでは SharedPreferences で保存します。 これは Key value方式での保存で、AndroidDeveloperならそのまま SharedPreferences として使えます。iOSDeveloperなら NSUserDefaults がそれに相当します。
SharedPreferencesはXML形式で保存されます。 アプリケーション固有のもので、アプリのアンインストールをしたりアプリのデータを消すと消えます。
データは非同期でディスクに保存されますが、コールバック等がなく書き込みがディスクに保存されることが「絶対」には保証できないため重要なデータを保存するのには向いていません。
AndroidはUIthreadでも扱うことができましたが、flutterでは async awaitを用いた非同期取得になりますのでご注意を。
pubspec.yamlに依存関係を追加 1  shared_preferences:^0.4.3   バージョンはこちらから確認してください。
その後いつも通り
flutter packages get  使ってみる プロジェクトを作った際に生成されるカウントアップの例を改造してSharedPreferencesに保存されるようにしてみます。
まずはコードから
コード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77  import &amp;#39;package:flutter/material.</description>
    </item>
    
    <item>
      <title>flutterTips-001-WebViewを使う</title>
      <link>https://sasakiyuki.github.io/posts/flutter_tips_001/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/flutter_tips_001/</guid>
      <description>cover : &amp;ldquo;https://raw.githubusercontent.com/UtkarshVerma/blog/source/static/images/gci/gci-thumb.png&amp;quot; draft: false
FlutterでWebViewを使うためには少しいじる必要があります。
flutter_webview_plugin Flutterで Nativeの WebView を呼び出すには flutter_webview_plugin の依存を追加する必要があります。
1 2  dependencies:flutter_webview_plugin:&amp;#34;0.2.1+2&amp;#34;   バージョンはこちら からご覧ください。
ターミナル上で
flutter packages get  インストールすることで使えるようになります。
また、WebViewはWdigetTreeには統合されていないためSnackBarやDialogを使うところはできません。
インポート文は
1  import &amp;#39;package:flutter_webview_plugin/flutter_webview_plugin.dart&amp;#39;;   実装 Flutter Navigationを利用して起動します。 公式サンプルのままですが
1 2 3 4 5 6 7 8 9 10  new MaterialApp( routes: { &amp;#34;/&amp;#34;: (_) =&amp;gt; new WebviewScaffold( url: &amp;#34;https://www.google.com&amp;#34;, appBar: new AppBar( title: new Text(&amp;#34;Widget webview&amp;#34;), ), ) }, );   WebviewScaffold を使ってその中で諸々セットして使います。 特に難しいことはありません。</description>
    </item>
    
    <item>
      <title>2018年にやったゲーム振り返り</title>
      <link>https://sasakiyuki.github.io/posts/game_2018_of_the_year/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/game_2018_of_the_year/</guid>
      <description>2018振り返りゲーム一覧 Steam  2018年6月6日 Slay the Spire 2018年6月13日 ARK: Survival Evolved 2018年7月6日 Octo Gravity 2018年7月7日 Eden Rising - Supremacy 2018年8月17日 Graveyard Keeper 2018年10月12日 Planet Coaster 2018年12月24日 Golf It! 2018年12月24日 Grand Theft Auto 5  スマホ  モンスト タップディフェンダー StormBound Marvel Battle Lines  CS  モンスターハンターワールド 地球防衛軍５ フォートナイト  最大3行でそれぞれ振り返り Slay the Spire 1ゲームのなかで敵を倒しながらデッキを作っていく、、って感じのゲーム
またアーリーアクセスだけどかなりオススメ
ソロでゲームをすることって特にPCではほとんどないんだけど、そんな中でもCivやるほど時間が取れなかった今年はソロゲーMVPかも。
ARK どんなゲームか調べずに初めて、わからずに終わった
人糞を拾って、げらげら笑うだけのゲームだった
71min
Octo Gravity multiゲーだと思って買って何もやってない
3min
Eden Rising - Supremacy 通称ｴﾃﾞﾗｲ</description>
    </item>
    
    <item>
      <title>トランザクションアナウンスにはNISのタイムスタンプを使う必要がある</title>
      <link>https://sasakiyuki.github.io/posts/nem_tips_001_transaction_timstamp/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/nem_tips_001_transaction_timstamp/</guid>
      <description>トランザクションアナウンスにはNISのタイムスタンプを使う必要がある タイトルの通りですが、トランザクションを作る際のタイムスタンプはローカルタイムではなくNISから持ってくる必要があります。
「は～～？そんなことドキュメントに書いてないぞ～～？」 と思った方　正解です。書いてません。
経緯 書こうと思った経緯ですが、某日　NEMFourm にて
とある人物がテストネットのHTTPS対応ノードを立てた旨をフォーラムに投稿しました。 すると一つのコメントが書き込まれました。 「なんで『nis.useNetworkTime = false』してんの？」と。要するにNetworktaimeを使わないよう設定していることを指摘しています。 これはミスではなくテストネットを立てた人にはある考えがあっての行動でした。 その考えというのが以下です。
「nem-libraryをはじめとする有名NEMLibraryはマシーンローカルタイムを使っているため」 とのことでした。確かに主要なライブラリはローカルタイムを採用しているものが多く、テストネットということもありこれは非常に理にかなった提案であると私も思いました。 また、テストネットを立てた人は「本来であればライブラリ側が対応するべきものですので一時的なdisableであり、こういった状況が改善されればこうする必要もなくなる」と仰っております。
アクションプラン さて、これを読んだエンジニアは何をすべきかは明白かと思います。ライブラリにPR送る？自プロダクトではTimeStampをしっかりセットする？どちらも正しそう。 が、そもそもNetworktimeはどのように取得すればいいでしょう。先ほども言ったようにこの仕様は特にNISのドキュメントには書かれていません。
APIはこれです
1  (NODE_DOMAIN)/time-sync/network-time   やってみる まず上のAPIを叩くとレスポンス形式としては
1 2 3 4  { &amp;#34;sendTimeStamp&amp;#34;: 117445044449, &amp;#34;receiveTimeStamp&amp;#34;: 117445044449 }   シンプルな二つのタイムスタンプだけが含まれています。 これのsendTimeStampを使用します。
これをトランザクションアナウンスAPIを叩くときに使いましょう！！
ちなみに拙作ラクーンウォレットでもローカルタイムを渡しているので対応する必要があります。
前提として使用させてもらっている nem-kotlin ではtimestampを渡すとそれが使われますが、渡さない場合ローカルタイムを自動的にセットしてくれています。該当コード
ので、timestampを渡すよう修正します。ラクーン側のコードは汚いんでホントは見てほしくないんですがここです。
おまけ このAPIに限りませんがNEMのタイムスタンプはちょっと特殊です。 例えばこれをそのままDateに変換すると全然違う日付になります。 ではどうするか。 NEMのジェネシスブロック時間を足す必要があります。
ちなみにジェネシスブロックの生成日は
1  cal.set(2015, 3 - 1, 29, 0, 6, 25)   です。これを足してDateを正しい日付にします。</description>
    </item>
    
    <item>
      <title>AndroidTips-003-リスト表示をしてみる</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_003/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_003/</guid>
      <description>複数の似たようなデータを表示する場合にはリスト形式のViewを使うのが一般的です。 今回はそのリスト形式のViewをどのように扱うかをやっていきたいと思います。
流れ  Listを表示する Activity を追加します。 レイアウトにリストの元になるRecyclerViewを置きます RecyclerViewにリストを表示するための Adapter を用意する （リストに表示するデータを用意する） 用意したAdapterをRecyclerView にセットしてリストを表示する  この流れでいきます。
目指すリストは下の通りです。
シンプルな文字だけどリストです。
Activityを追加 特に難しいことはしませんが一応。 Empty Activity を作り今回は名前は SimpleStringListActivity としました。
レイアウトファイルにRecyclerViewを置く Androidでリスト表示をするには RecyclerVIew を使います。
まずはレイアウトファイルに配置してみましょう。
1 2 3 4 5 6 7 8 9 10  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;android.support.v7.widget.RecyclerView android:id=&amp;#34;@+id/recyclerView&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   RecyclerViewはサポートライブラリーで追加されたViewです。
RecyclerViewで表示するレイアウトを作る リストとして表示する主な要素となるレイアウトを作成します。 今回はシンプルなリストを目指すのでTextViewのみ置かれたシンプルなレイアウトファイルを作成します。
1 2 3 4 5 6 7 8 9 10 11 12 13  &amp;lt;?</description>
    </item>
    
    <item>
      <title>PythonDjango入門-DBに触れる</title>
      <link>https://sasakiyuki.github.io/posts/python_django_db/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_django_db/</guid>
      <description>データベースが必要になる理由 前回までにユーザーの登録フォームなどを作ってきましたが、特にデータの保存等はしてきませんでした。 Webアプリケーションを作る上で何かしらのデータを保存することは絶対に必要になってきます。データを個人で永続的に使うというだけであればデータベースでなくとも何かしらの形でファイルにアウトプットすればいいでしょうが、Webアプリケーションでは同時に別のユーザーから開かれる可能性があるのでファイルを開いていたら何か障害が起きかねません。そもそもアクセス速度やデータ分類などの面で問題がありそうです。
データベースはそれらを解決するために長年進化を続けてきました。特にRDBMS(リレーショナルデータベースマネジメントシステム　説明するにはちょっとDBの知識がいるので今は要するに『普通のDB』とでも思っていてください）は長く、現在も使われています。現在ではNoSQLなどRDBMSとは違うDBも出てきていますが、今回はこのRDBを学んでいきます。
データベース全体の特徴は
 なんといってもデータアクセス速度が速い 高度な検索が可能 同時アクセスされることを前提に作られている  DjangoでDBを使う 上記の通りDBを使うことにメリットが非常にあることがわかりましたが、一口にDBといっても色々なものが存在します。 Djangoだと使われがちなのは
 SQLite MySQL PostgreSQL  でしょうか。 それぞれ特徴があります。すごく雑に説明すると（上から）
 djnagoプロジェクトを作ると初期設定はこれ　軽い、高速　だけど大規模に向いてないので学習や小規模など　ちなみにAndroidで採用されている 最も多く採用されているんじゃないかと言われている 導入コストが低く済む　  すべて共通してオープンソースで、SQLというデータアクセス言語を使っています。
今回はPostgreSQLでいきましょう！
djangoにてPostgreSQLを設定をする まずはインストールをします。 MacOSなら Homebrewを使ってすぐに終わります。
brew install postgresql  Winだったらまずはインストーラーをこちらからダウンロードしてください。
インストーラー起動するとディレクトリとかの設定は基本デフォルトで問題ないですが見慣れないスーパーユーザーのパスワードの設定をしてください、という項目があると思うので任意のものを設定してください。 またポートはデフォルトの5432でいいでしょう。 ロケールは デフォルトで
で、パスを通します。
環境変数設定で　C:\Program Files\PostgreSQL\11\bin　先ほどインストールした bin を通して
パスが通ってることを確認。
psql --version  通ってたら成功です。
settings.py をご覧ください。デフォルトのままであれば
1 2 3 4 5 6  DATABASES = { &amp;#39;default&amp;#39;: { &amp;#39;ENGINE&amp;#39;: &amp;#39;django.</description>
    </item>
    
    <item>
      <title>アプリケーションのレイアウト</title>
      <link>https://sasakiyuki.github.io/posts/android_tutorial_layout/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tutorial_layout/</guid>
      <description>レイアウトとは レイアウトとは、GUIの配置を決めるための仕組みです。 このレイアウトを使うことによって、Androidアプリの画面を簡単に作成することができます。
レイアウトを構成する要素 画面を構成する要素（パーツ）は大きくわけて２種類あります。
 Wedget(ウィジェット） Layout(レイアウト）  です。これらの要素をまとめてViewといいます。
WedgetとLayoutの違いを超わかりやすく説明します。 ざっくり言うと、Layoutの中（要素）にWedgetを配置していくイメージです。 枯山水で例えると一番親要素のLayoutを「寺院」全体として、その中の小要素のレイアウトが「庭園」、さらにその中に配置される孫要素が「砂紋」や「石」です。
それぞれ具体的にどのような種類があるか。
Wedget  TextView EditText Button ImageView ListView  Layout  FrameLayout LinearLayout TableLayout GridLayout RelativeLayout ConstraintLayout(new!)  以上が代表的なViewとなります。もちろんこれ以外にもたくさんありますが、必要な時に覚えていけば問題ありません。
どちらにも共通する要素 サイズの指定方法 .xmlでの指定は大きく分けて三つあります - 画面いっぱいに表示する - その要素を表示するのに必要なだけ大きさを確保する - サイズを直接指定する
の三つです。ではそれぞれやっていきましょう。
1 2 3 4 5 6 7 8 9 10 11  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;LinearLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;TextView android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:background=&amp;#34;@android:color/holo_blue_bright&amp;#34; android:text=&amp;#34;テキストを表示します&amp;#34; /&amp;gt; &amp;lt;/LinearLayout&amp;gt;   まず一旦 LinearLayoutとは何ぞやということなどは忘れてもらってこれを実際に画面に映してみると</description>
    </item>
    
    <item>
      <title>PythonDjango入門-テンプレートを使ってみる </title>
      <link>https://sasakiyuki.github.io/posts/python_django_templetes/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_django_templetes/</guid>
      <description>テンプレートを使ってそれらしいものを表示する 前回の資料では各種関数の戻り値に HttpResponse を用いてテキストを表示していました。 簡単なテキストを表示するだけならこれでも問題ありませんが、現実でそんなケースはむしろないです。
Webアプリケーションで物を作るなら HTML/CSSやJS,またファイルなどの静的ファイルを活用してユーザーによりよいユーザー体験を届けたいところですが、Pythonは直接HTMLファイルを扱うのは苦手です。そもそも直接HTML/CSSをいじるだけならDjangoを使う必要はありません。
そこでPythonに適した形でHTMLを扱いところです。それを「テンプレート」といいます。テンプレートは変数などPythonで扱っている値をHTMLに代入し表示を行うものでDjangoで用意されているテンプレートは DTL と呼ばれます。(Django Template Language)
基本的にはHTMLのように使えます。
テンプレートを作成、表示する ではテンプレートを作成してみましょう。
テンプレートはどこに作成するか Project -&amp;gt; App -&amp;gt; templates(create) -&amp;gt; AppName(create)
createと書かれているファイルを作成します。 例えば私の今回のケースだと ProjectName:app1 AppName:app1,app2 その中の app2にtempletesというフォルダを作成 templetesというフォルダの中にapp2というフォルダを作りその中にテンプレートを置きます。
ではテンプレートは index.html を作成しましょう。
Pycharmで作成すると
1 2 3 4 5 6 7  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;   単純なHTMLが吐き出されました。これを少しだけいじってさっそくテンプレートっぽく使ってみます。
テンプレート（HTML）で変数を扱う 1 2 3 4 5 6 7  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;{{ title }}&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;   titleを {{}} で囲みました。 これがテンプレートで変数を使うように定義する方法です。</description>
    </item>
    
    <item>
      <title>Pythonにおけるオブジェクト指向</title>
      <link>https://sasakiyuki.github.io/posts/python_django_local_and_url/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_django_local_and_url/</guid>
      <description>Pythonの特徴 初期リリースは91年で開発当初はオブジェクト指向を意識した設計になっていませんでしたが、途中からオブジェクト指向が組み込まれリリースに合わせてそれらは含まれる形になりました。 あまり日本では注目されることのなかった言語のようですが、機械学習やGoogle app engineにpythonが採用（そもそもGoogleでは社内標準言語としてpythonが採用されていますが）されたため日本でも注目を集め今では珍しくないレベルまで来ています。 スクリプト言語であり学習に向いているとされています。その理由としてはそもそもスクリプト言語が実行しやすかったり（コンパイルが不要）、Pythonの記法がシンプルであることから言われています。中でもインデントブロックは大きな特徴の一つです。
Webフレームワークとは さて、では実際にPythonでWebアプリケーションを作ろうとなった時にWebフレームワークの選定が必要になります。 そもそもWebフレームワークとは Webアプリケーションを作成する際に骨組み（足場）になってくれるもののことを指します。フレームワーク自体が機能群のことで、それのWb版だと思っていただければ問題ありません。最大のメリットは「書くコードが減る」ということです。フレームワークによって大なり小なりありますが作成に必要な機能が盛り込まれており１から書く必要がなくなります。また、書き方なども統一されるため可読性が上がるなどのメリットもあります。 Pythonで有名なWebフレームワークは
 Django Flask Bottle  などが有名どころです。 下に行くほど軽量なフレームワークとなっていきます。
今回はこの中でも実際に採用されている万能な大型フレームワークであるDJangoを使っていきたいと思います。
Djangoとは Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.  公式からの引用ですがハイレベルなWebフレームワークで超スピードで実用的なWebアプリケーションを構築するぜ、と言っています。
フルスタックフレームワークと言われる、いわゆる全部盛りフレームワークで、複雑なデーターベース主体のアプリケーションを簡単に書くことができたり、管理者用GUIを自動生成したりするなど便利な機能がたくさん載っています。 また、プロジェクトの構成が単純で生成時のファイルが少ないのもメリットと言えるでしょう。
セットアップ 早速セットアップしていきます
雑にpythonのパスを通します。(TODO)
IDEはPyCharmを使います
新規Djangoプロジェクトの作成 ではさっそくPyCharmを起動してプロジェクトを作成します。
New Project -&amp;gt; Djangoを選択
プロジェクトファイル 自動生成されるコードの紹介
 init.py  Pythonでは特別な意味を持つファイルで、このディレクトリをPythonパッケージであるということを伝えるために存在しています。
 settings.py  Djangoで生成したアプリケーションの設定をつかさどっているファイルです。
 urls.py  URL宣言が含まれているファイルでルーティングはここで行います。
 wsgi.py  作ったPythonプロジェクトをWebサーバーにデプロイする際に使用されるファイルです（エントリポイントを定義している） Webアプリケーションのメインのプログラムとなります。
 manage.</description>
    </item>
    
    <item>
      <title>Pythonにおけるオブジェクト指向</title>
      <link>https://sasakiyuki.github.io/posts/python_object_oriented/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/python_object_oriented/</guid>
      <description>オブジェクト指向とは プログラミングを効率的に行うための考え方、手法の一つ。概念。 効率的に行うには 共通の設計思想 が大切で現在では主流の一つ。
関連のあるデータや処理をまとめて「オブジェクト」にし、コードを管理しやすくすることである。
pythonはオブジェクト指向言語だが、関数があったりと割と自由な言語である。 javaから来た人間としてはオー自由だなーと思うことが多い。（どっちがいいとかそういう話ではない）
オブジェクト指向を構成する要素  クラス メソッド データ プロパティ インスタンス カプセル化 継承 ポリモーフィズム  では説明していきましょう。
クラス Class とはオブジェクトの設計図 です。 クラス内にはオブジェクトを作る際に必要なデータやメソッド（後述、処理）などが記述されています。
定義の方法は簡単で
class `クラス名` :  これらの中にデータやメソッド追加していくことで一つのクラスになります。
[memo] カラのclass 空のクラスというのも存在します 仕組み的にpythonでは : 以降何もないのは無理なので
1 2  class EmptyClass: pass   と記述します。
[memo] クラスの命名規則 ThisIsClass のように単語区切りで先頭は大文字に
メソッドの定義 method とはクラス内に記述された処理。 定義されたデータを使って何かしたり、クラスに関する何かを定義したりします。 関数との大きな違いはクラスに属しているという点です。
class ClassName: def MethodName(self,その他引数): 処理  メソッドは必ず一つの引数を持ちその一つとは self　です。 ただし呼び出し自体は
インスタンス化（後述）されたクラス.MethodName()  でselfは記述する必要がありません。 このselfとは自身を指しており、 .</description>
    </item>
    
    <item>
      <title>AndroidManifestについて</title>
      <link>https://sasakiyuki.github.io/posts/android_document_android_manifest/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_document_android_manifest/</guid>
      <description>AndroidManifestとは AndroidManifest.xmlはすべてのプロジェクトに等しく一つ存在するものです。
作っているAndroidアプリに関する情報をAndroidのOS(システム）に伝える役目を担っており、コード実行の際に必要になる重要な情報を記述する必要があります。
プロジェクトの基底ディレクトリに AndroidManifest.xml として置く必要があり名前を変えることなどはできません。
XML で記述されており、タグで要素を構築します。
AndroidManifest内で行うこと  アプリを構成する要素 ユーザーパーミッション スタイルや名前、アイコンなどを指定 Intentのフィルター  ファイル内の規則 AndroidManifestで必須の要素は &amp;lt;manifest&amp;gt; &amp;lt;application&amp;gt; のみです。 これらは省くことはできず、逆にそれ以外は任意ということになります。（実質必要というものは存在します） また manifest と application はそれぞれ一回ずつのみ宣言され、階層は manifest -&amp;gt; application の中に存在しないといけません。
実際に見てみましょう。 例えばAndroidStudioでプロジェクトを初期で作った時に生成されるmanifestは以下です。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; package=&amp;quot;string&amp;quot;&amp;gt; &amp;lt;application android:allowBackup=&amp;quot;true&amp;quot; android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot; android:roundIcon=&amp;quot;@mipmap/ic_launcher_round&amp;quot; android:supportsRtl=&amp;quot;true&amp;quot; android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt; &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt; &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;/application&amp;gt; &amp;lt;/manifest&amp;gt;  manifestタグの中にapplicationが存在しているのがわかると思います。
注目してもらいたいのは２行目 xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; この.xmlファイルはAndroidManifestですよ、と宣言しているということになります。 また、xml上に android のネームスペースを定義しています。またこの中の属性は絶対に &amp;quot;http://schemas.android.com/apk/res/android&amp;quot; である必要がありますのでご注意ください。
次に application内を見てみると様々な情報が書いてあることがわかると思います。 上から</description>
    </item>
    
    <item>
      <title>AndroidTips-002-画面移動してみる</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_002/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_002/</guid>
      <description>サンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import android.content.Context import android.content.Intent import android.os.Bundle import android.support.v7.app.AppCompatActivity import kotlinx.android.synthetic.main.activity_main.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) setupButton() } private fun setupButton() { redImageView.setOnClickListener { val intent = Intent(this@MainActivity, FormActivity::class.java) startActivity(intent) } } }   Intent アプリの中での移動に限らず外への移動（例えば標準のWebブラウザに飛ばす）などに用いられる画面遷移用のコンポーネントです。 どこに移動するか　や　移動の際に渡すデータ　などを指定できます。 今回は単純に移動するためだけに使っているシンプルな使い方です。その際のIntentのコンストラクタは</description>
    </item>
    
    <item>
      <title>AndroidTips-001-押されたら何かをするを実装する</title>
      <link>https://sasakiyuki.github.io/posts/android_tips_001/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/posts/android_tips_001/</guid>
      <description>サンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  import android.os.Bundle import android.support.v7.app.AppCompatActivity import android.view.View import android.widget.ImageView import kotlinx.android.synthetic.main.activity_main.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) setupButton() } private fun setupButton() { // 1 val button = findViewById&amp;lt;ImageView&amp;gt;(R.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sasakiyuki.github.io/404/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/404/</guid>
      <description> Error 404: Page Not Found It seems that the page that you&amp;rsquo;re trying to access doesn&amp;rsquo;t exist. 😟 If you&amp;rsquo;re sure that it exists, chances are it might have been moved to a new link! You may search for it on the home page. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sasakiyuki.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sasakiyuki.github.io/about/</guid>
      <description>So, Who Am I? 
ヤマダユキと申します。
都内に住むソフトウェアエンジニアです。 技術ブログや日々の話など雑多に書きます。
基本休日もコード書いてることが多いですが、その他の趣味にカメラとDTM civ6などもあります。
経歴等はWantedlyをご確認ください。 相談は上部mailやtwitterDMなどどこでもどうぞ。</description>
    </item>
    
  </channel>
</rss>